
.IPPcode21

DEFVAR GF@counter
# prazdny retezec
Move GF@counter   string@ # Inicializace proměnné na prázdný řetězec
# Jednoduchá iterace , dokud nebude splněna zadaná podmínka

CREATEFRAME 

defvar TF@cunt

MOVE TF@cunt string@hello


# while loop
LABEL while

	# until filed 3as
	STRLEN TF@cunt GF@counter

	JUMPIFEQ end TF@cunt int@20	

	# output
	WRITE GF@counter
	WRITE string@a\010

	# append
	CONCAT GF@counter GF@counter string@a

JUMP while

LABEL end
WRITE string@Proměnná\032GF@counter\032obsahuje\032
WRITE GF@counter
WRITE string@a\010

MOVE GF@counter string@

WRITE string@hello_word:\010================\010
CALL hello_word

WRITE string@after\032calling\032hello_word\010
WRITE GF@counter
WRITE string@\010

WRITE string@----------------\010



PUSHS string@
PUSHS string@hello\032word
PUSHS int@0

WRITE string@trimo:\010================\010
call trimo

DEFVAR TF@index
DEFVAR TF@input
DEFVAR TF@output
POPS TF@index
POPS TF@input
POPS TF@output

WRITE string@input:\010
WRITE TF@input
WRITE string@\010output\010
WRITE TF@output
WRITE string@\010

WRITE string@----------------\010


WRITE string@read_example:\010================\010
CALL READ_EXAMPLE
WRITE string@----------------\010

WRITE string@reverse:\010================\010

PUSHS string@kobyla\032ma\032maly\032bok
CALL reverse_from_ord
WRITE string@\010----------------\010

write string@int2char:\010================\010
DEFVAR TF@ord
MOVE TF@ord int@35
INT2CHAR TF@ord TF@ord
WRITE TF@ord
WRITE string@\010----------------\010

write string@type<exml:\010================\010
PUSHS nil@nil
CALL type_of
WRITE string@\010----------------\010

write string@lowercasafc\010================\010
PUSHS string@type<exml:
CALL lowercasafc
WRITE string@\010----------------\010

EXIT int@0
#
##|===============================================|
###|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
###| fc definiciotn                                |
###|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
##|===============================================|
#

label lowercasafc
pushFrame
createFrame
	defvar tf@to_print
	pops tf@to_print 
	write tf@to_print
popFrame
return


# type of 
LABEL type_of 
PUSHFRAME 
CREATEFRAME 
	DEFVAR TF@type
	POPS TF@type 

	TYPE TF@type TF@type

	WRITE TF@type

POPFRAME 
RETURN

# example function
LABEL EMPTY_EXAMPLE_FC
PUSHFRAME 
CREATEFRAME 
DEFVAR TF@INPUT


POPFRAME 
RETURN


# read example
LABEL READ_EXAMPLE
PUSHFRAME 
CREATEFRAME 

	DEFVAR TF@buffer

	LABEL eachline

		READ TF@buffer string
		WRITE TF@buffer

	JUMPIFNEQ eachline TF@buffer nil@nil

POPFRAME 
RETURN

# stri2int example
LABEL reverse_from_ord
PUSHFRAME 
CREATEFRAME 
DEFVAR TF@input
POPS TF@input
	
	DEFVAR TF@ord
	DEFVAR TF@len
	STRLEN TF@len TF@input

	LABEL while123

		SUB TF@len TF@len int@1

		STRI2INT TF@ord TF@input TF@len
		
		INT2CHAR TF@ord TF@ord

		WRITE TF@ord


	JUMPIFNEQ while123 TF@len int@0

POPFRAME 
RETURN


# trim char o from string 
LABEL trimo
PUSHFRAME 
CREATEFRAME 
	
DEFVAR TF@input 
DEFVAR TF@index 
DEFVAR TF@output 
POPS TF@index
POPS TF@input
POPS TF@output
	
	# if index in input: return 
	DEFVAR TF@len 
	STRLEN TF@len TF@input 

	LT TF@len TF@index TF@len 

	JUMPIFNEQ outofbouds  TF@len bool@true 

		# if input[i]  != o: output.append(imput[o])
		DEFVAR TF@CHAR 
		GETCHAR TF@CHAR TF@input TF@index
		JUMPIFEQ noofound TF@CHAR string@o
			
			CONCAT TF@output TF@output TF@CHAR 

		LABEL noofound 
		
		# index++
		ADD TF@index TF@index int@1 
		
		# recurive call
		PUSHS TF@output
		PUSHS TF@input
		PUSHS TF@index

		call trimo

		POPS TF@index
		POPS TF@input
		POPS TF@output
	
	LABEL outofbouds 


PUSHS TF@output
PUSHS TF@input
PUSHS TF@index
POPFRAME 
RETURN

# hello word 
LABEL hello_word
PUSHFRAME
CREATEFRAME
	
	# append
	CONCAT GF@counter GF@counter string@a
	
	# until filed 3as
	DEFVAR TF@cunt
	STRLEN TF@cunt GF@counter

	JUMPIFEQ basecase TF@cunt int@4
		CALL hello_word
	LABEL basecase

POPFRAME 
RETURN


